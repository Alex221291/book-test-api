import { BookingEntity } from './bookings.entity';
import { BookingsService } from './bookings.service';
import { UserEntity } from '../users/users.entity';
import { BookingInput } from './dto/bookings.input';
import { CustomerService } from '../customers/customer.service';
import { ScheduleService } from '../schedules/schedules.service';
import { ServicesService } from '../services/services.service';
import FiltersExpression from '../../base/graphql-filter/types/filters.type';
import SorterType from '../../base/graphql-sorter/types/sorter.type';
import BookingPaginatedResponse from './types/boooking.paginate';
import { CompaniesService } from '../companies/companies.service';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { EmployeesService } from '../employees/employees.service';
import { OfficesService } from '../offices/offices.service';
import { BookingsStatuses } from './types/bookings.statuses';
import { SubscriptionsService } from '../subscriptions/subscriptions.service';
import { WebFormService } from '../webforms/webform.service';
import { BookingsWebFormInput } from './bookings.webform.input';
import { PaymentsService } from '../payments/payments.service';
import { UsersService } from '../users/users.service';
import { BookingSimpleInput } from './dto/bookings.simple.input';
export declare class BookingsResolver {
    private bookingsService;
    private customerService;
    private scheduleService;
    private servicesService;
    private companyService;
    private employeeService;
    private webFormService;
    private officesService;
    private usersService;
    private subscriptionsService;
    private paymentsService;
    private eventEmitter;
    constructor(bookingsService: BookingsService, customerService: CustomerService, scheduleService: ScheduleService, servicesService: ServicesService, companyService: CompaniesService, employeeService: EmployeesService, webFormService: WebFormService, officesService: OfficesService, usersService: UsersService, subscriptionsService: SubscriptionsService, paymentsService: PaymentsService, eventEmitter: EventEmitter2);
    addBooking(hash: string, payload: BookingsWebFormInput): Promise<BookingEntity>;
    addSimpleBooking(user: UserEntity, companyId: string, payload: BookingSimpleInput): Promise<BookingEntity>;
    addBookingByAdmin(user: UserEntity, payload: BookingInput): Promise<BookingEntity>;
    updateBookingByAdmin(user: UserEntity, bookingId: string, payload: BookingInput): Promise<BookingEntity>;
    changeBookingStatus(user: UserEntity, hash: string, status: BookingsStatuses): Promise<Record<string, any>>;
    confirmBooking(hash: string, code: string): Promise<BookingEntity>;
    cancelBooking(hash: string): Promise<BookingEntity>;
    closeBooking(user: UserEntity, hash: string, amount: number): Promise<BookingEntity>;
    getBookings(user: UserEntity, companyId: string, filters: FiltersExpression[], sorters?: SorterType[], offset?: number, limit?: number): Promise<BookingPaginatedResponse>;
    getBooking(hash: string): Promise<BookingEntity>;
}
