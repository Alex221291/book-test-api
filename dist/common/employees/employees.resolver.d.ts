import { EmployeesService } from './employees.service';
import { EmployeeEntity } from './employees.entity';
import { EmployeeInput } from './employees.input';
import { UserEntity } from '../users/users.entity';
import { Logger } from '@nestjs/common';
import FiltersExpression from '../../base/graphql-filter/types/filters.type';
import SorterType from '../../base/graphql-sorter/types/sorter.type';
import BookingPaginatedResponse from '../bookings/types/boooking.paginate';
import { CompaniesService } from '../companies/companies.service';
import { ServicesService } from '../services/services.service';
import { FileService } from '../file/file.service';
import { WebFormService } from '../webforms/webform.service';
import { OfficesService } from '../offices/offices.service';
import { RoleTypes } from '../users/users.role.enum';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { PlansService } from '../plans/plans.services';
import { NotificationsService } from '../notifications/notifications.service';
import { TelegramService } from '../integrations/messageServices/telegram/telegram.service';
export declare class EmployeesResolver {
    private readonly service;
    private readonly companyService;
    private readonly servicesService;
    private readonly fileService;
    private readonly webFormService;
    private readonly officesService;
    private readonly plansService;
    private readonly eventEmitter;
    private readonly notificationsService;
    private readonly telegramSender;
    protected readonly logger: Logger;
    constructor(service: EmployeesService, companyService: CompaniesService, servicesService: ServicesService, fileService: FileService, webFormService: WebFormService, officesService: OfficesService, plansService: PlansService, eventEmitter: EventEmitter2, notificationsService: NotificationsService, telegramSender: TelegramService);
    private prepareEmployee;
    addEmployee(user: UserEntity, companyId: string, entity: EmployeeInput): Promise<EmployeeEntity>;
    addEmployeePhoto(user: UserEntity, id: number, fileId: number): Promise<EmployeeEntity>;
    addEmployeeBackground(user: UserEntity, id: number, fileId: number): Promise<EmployeeEntity>;
    updateEmployee(user: UserEntity, id: number, entity: EmployeeInput): Promise<EmployeeEntity>;
    setEmployeeAccess(user: UserEntity, id: number, phone: string, role: RoleTypes): Promise<EmployeeEntity>;
    removeEmployee(user: UserEntity, id: number): Promise<EmployeeEntity>;
    getEmployeeById(user: UserEntity, id: number): Promise<EmployeeEntity>;
    getEmployees(companyId: string, filters: FiltersExpression[], sorters?: SorterType[], offset?: number, limit?: number): Promise<BookingPaginatedResponse>;
}
